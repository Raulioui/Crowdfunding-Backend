// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class fundingContractCreated extends ethereum.Event {
  get params(): fundingContractCreated__Params {
    return new fundingContractCreated__Params(this);
  }
}

export class fundingContractCreated__Params {
  _event: fundingContractCreated;

  constructor(event: fundingContractCreated) {
    this._event = event;
  }

  get pair(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get name(): string {
    return this._event.parameters[2].value.toString();
  }

  get description(): string {
    return this._event.parameters[3].value.toString();
  }

  get target(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get categorie(): string {
    return this._event.parameters[5].value.toString();
  }

  get timeLimit(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get imageCid(): string {
    return this._event.parameters[7].value.toString();
  }
}

export class Factory extends ethereum.SmartContract {
  static bind(address: Address): Factory {
    return new Factory("Factory", address);
  }

  FROM_GWEI_TO_WEI(): BigInt {
    let result = super.call(
      "FROM_GWEI_TO_WEI",
      "FROM_GWEI_TO_WEI():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_FROM_GWEI_TO_WEI(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "FROM_GWEI_TO_WEI",
      "FROM_GWEI_TO_WEI():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  createCrowdFunding(
    name: string,
    description: string,
    _target: BigInt,
    categorie: string,
    timeLimit: BigInt,
    imageCid: string
  ): Address {
    let result = super.call(
      "createCrowdFunding",
      "createCrowdFunding(string,string,uint256,string,uint256,string):(address)",
      [
        ethereum.Value.fromString(name),
        ethereum.Value.fromString(description),
        ethereum.Value.fromUnsignedBigInt(_target),
        ethereum.Value.fromString(categorie),
        ethereum.Value.fromUnsignedBigInt(timeLimit),
        ethereum.Value.fromString(imageCid)
      ]
    );

    return result[0].toAddress();
  }

  try_createCrowdFunding(
    name: string,
    description: string,
    _target: BigInt,
    categorie: string,
    timeLimit: BigInt,
    imageCid: string
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createCrowdFunding",
      "createCrowdFunding(string,string,uint256,string,uint256,string):(address)",
      [
        ethereum.Value.fromString(name),
        ethereum.Value.fromString(description),
        ethereum.Value.fromUnsignedBigInt(_target),
        ethereum.Value.fromString(categorie),
        ethereum.Value.fromUnsignedBigInt(timeLimit),
        ethereum.Value.fromString(imageCid)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  implementationCrowdfundingContract(): Address {
    let result = super.call(
      "implementationCrowdfundingContract",
      "implementationCrowdfundingContract():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_implementationCrowdfundingContract(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "implementationCrowdfundingContract",
      "implementationCrowdfundingContract():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  implementationVotingContract(): Address {
    let result = super.call(
      "implementationVotingContract",
      "implementationVotingContract():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_implementationVotingContract(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "implementationVotingContract",
      "implementationVotingContract():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreateCrowdFundingCall extends ethereum.Call {
  get inputs(): CreateCrowdFundingCall__Inputs {
    return new CreateCrowdFundingCall__Inputs(this);
  }

  get outputs(): CreateCrowdFundingCall__Outputs {
    return new CreateCrowdFundingCall__Outputs(this);
  }
}

export class CreateCrowdFundingCall__Inputs {
  _call: CreateCrowdFundingCall;

  constructor(call: CreateCrowdFundingCall) {
    this._call = call;
  }

  get name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get description(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _target(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get categorie(): string {
    return this._call.inputValues[3].value.toString();
  }

  get timeLimit(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get imageCid(): string {
    return this._call.inputValues[5].value.toString();
  }
}

export class CreateCrowdFundingCall__Outputs {
  _call: CreateCrowdFundingCall;

  constructor(call: CreateCrowdFundingCall) {
    this._call = call;
  }

  get pair(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}
